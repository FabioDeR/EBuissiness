@page "/external-contacts"
@using System.ComponentModel.DataAnnotations
@using Radzen
@using Radzen.Blazor

<div class="container">
    <div class="vertical-line"></div>

    @foreach (var contact in ExternalContacts)
    {
        <div class="contact-box">
            @if (contact.Expanded)
            {
                <div class="sub-contact-box">
                    <RadzenTextBox @bind-Value="contact.SubName" Placeholder="Sub contact name" Style="width: 200px; margin-right: 10px;" />
                    <RadzenDatePicker @bind-Value="contact.SelectedDate" Style="width: 150px; margin-right: 10px;" />
                    <RadzenIcon Icon="info" Style="margin-right: 10px;" />
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Click="() => contact.Expanded = false" />
                    <div style="margin-top: 10px;">
                        <RadzenSwitch @bind-Value="contact.ShowPO" />
                    </div>
                    @if (contact.ShowPO)
                    {
                        <RadzenTextBox @bind-Value="contact.PONameFunction" Placeholder="Specify the name and function of PO" Style="width: 100%; margin-top: 10px;" />
                    }
                </div>
            }

            <div class="main-contact-box">
                <RadzenTextBox @bind-Value="contact.Name" Placeholder="Enter external contact" Style="width: 200px; margin-right: 10px;" />
                <RadzenButton Icon="search" Size="ButtonSize.Small" Click="() => contact.Expanded = true" />
            </div>

            <div class="remove-button-wrapper">
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Click="() => RemoveContact(contact)" />
            </div>
        </div>
    }

    <div class="add-button-wrapper">
        <RadzenButton Icon="add_circle" Click="AddContact" />
    </div>
</div>

<style>
    .container {
        position: relative;
        margin-left: 40px;
    }

    .vertical-line {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 10px;
        width: 2px;
        background-color: #ccc;
        z-index: 0;
    }

    .add-button-wrapper {
        position: relative;
        margin: 20px 0;
        z-index: 1;
    }

    .add-button-wrapper::before {
        content: "";
        position: absolute;
        left: -30px;
        top: 50%;
        width: 30px;
        height: 2px;
        background-color: #ccc;
    }

    .contact-box {
        position: relative;
        padding-left: 20px;
        margin-bottom: 2rem;
        border-left: 2px solid #ccc;
    }

    .contact-box::before {
        content: "";
        position: absolute;
        left: -30px;
        top: auto;
        bottom: 0;
        width: 30px;
        height: 2px;
        background-color: #ccc;
        border-bottom-left-radius: 10px;
    }

    .sub-contact-box {
        padding-left: 20px;
        margin-bottom: 10px;
    }

    .main-contact-box {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    .remove-button-wrapper {
        margin-top: 5px;
    }
</style>

@code {
    public class ExternalContact
    {
        public string? Name { get; set; }
        public string? SubName { get; set; }
        public DateTime? SelectedDate { get; set; }
        public bool ShowPO { get; set; } = false;
        public bool Expanded { get; set; } = false;
        public string? PONameFunction { get; set; }
    }

    private List<ExternalContact> ExternalContacts = new();

    private void AddContact()
    {
        ExternalContacts.Add(new ExternalContact());
    }

    private void RemoveContact(ExternalContact contact)
    {
        ExternalContacts.Remove(contact);
    }
}
